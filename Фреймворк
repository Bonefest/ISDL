MSDL - Modern SDL. Является обёрткой обычного SDL,добавляет более высокий слой абстракции , благодаря применению принципов ООП.

К ключевые моменты,которые добавляет MSDL:

+Игра - главный класс,который хранит необходимую информацию об всей игре.Хранит набор сцен и оперирует ими.Является синглтоном,т.е имеет всего один экземпляр на всю игру.
+Сцена - класс,который отображает логику игрового уровня.Так же фактически представляет конкретный уровень.Является абстрактным классом,который должен быть переопределен.

*Камера	- класс,который хранит собственные координаты,по сути является игровым объектом и который может перемещаться.Все объекты отображаются относительно этого объекта.Это означает,что если камера в позиции (0,0),то всё отображается в привычном для нас виде,если же камера сдвинется вправо на 10 единиц,то все объекты сдвинутся влево на 10 единиц.

Камера является точно таким же объектом,как кнопка или монстр,она является частью сцены,а не всей игры,из-за этого ответственность за отображение всех объектов возлагается на конкретную сцену.

*Спрайт - класс,который определяет объект,являющийся частью сцены.Является базовым классом для всех отображаемых элементов игры : Граф.Интерфейс,Существа,Объекты,Вещи и т.д.Хранит позицию,текстуру,размер и т.д.Фактически является обёрткой SDL_Texture.
*Игровой объект
*Интерфейс - набор базовых элементов интерфейса: кнопки,скролбары,вкладки и т.д.

Почти каждый элемент интерфейса наследует класс Sprite,который представляет изображаемый объект в мире игры.
Основные элементы интерфейса:

Окно - представляет контейнер,который хранит другие элементы и отрисовывает каждый из них.
Кнопка - представляет кнопку,которая принимает некоторую callback-функцию и другие данные для отображения и внешнего вида.
Скроллбар - представляет набор из двух кнопок и полосы,которые связаны с заданным окном.
Поле ввода

*Анимация - добавляет несколько классов для работы с анимацией


*ActionManager - синглтон,который принимает объект (к примеру спрайт) благодаря специализированным функциям (пример ActionManager::Move) и выполняет заданное действие.

Основные функции ActionManager'a: 

1.Move - двигает объект в заданную точку за заданное время.
2.MoveBy - двигает объект в заданную точку относительно текущей позиции за заданное время.
3.Tint - красит объект в заданный цвет за заданное время.
4.Rotate - поворачивает объект в заданном направлении на заданный угол за заданное время.
5.RotateBy - поворачивает объект в заданном направлении на заданый угол относительно текущего за заданное время.
6.Use - вызывает функцию спустя заданное время.
7.

*TextureManager - синглтон,который принимает имя текстуры и возвращает текстуру целиком (getTexture) , либо часть текстуры,в случае работы с атласом (getPartTexture).Так же умеет читать json файлы для инициализации текстурами,указанными во внешних файлах.Всю информацию хранит в map ,где ключ - это имя текстуры,а значение - структура TextureInfo ,которая состоит из SDL_Rect,описывающем положение части изображения на текстуре и самой текстуры


+Логирование - добавление всей происходящей с игрой информации в лог



Отрисовка происходит по следующей цепочке : Игра-Сцена(Рисует все объекты,которые принадлежит сцене относительно камер)-Спрайт-Анимация

(БУДУЩЕЕ) Добавление спрайтов на сцену сразу сортируется по расстоянию до центра.

(БУДУЩЕЕ) Добавление спрайтов на сцену может осуществляется с помощью ещё одной функции,которая определяет какие объекты будут рисоваться первыми,а какие - последними.

(БУДУЩЕЕ) Поле обзора камеры 

(БУДУЩЕЕ) Сохранять вместо последней точки нажатой мыши,целое событие.Тогда мы сможем получать кроме всего того дополнительную информацию (например кол-во кликов).

(БУДУЩЕЕ) Камера отцентровывает свой объект по размеру,заданному в game.h , в будущем добавить viewport и соответственно размер его и положение.

(РЕШЕНО) функция getPressedTime работает не так как нужно,вероятно проблема в erase (функция возвращает всегда -1,кроме 1го раза).

(ВОЗМОЖНО) если игра сильно зависает deltaTime становится очень большим,при этом анимация в любом случае перекидывается на 1 кадр.

(?) Размер Sprite храниться в Rect,который хранит координаты


Закончил на нажатии на спрайт.Суть в том,что позиция спрайта - абсолютная,для клика нужно как-то получать относительные координаты. (Как вариант,передвигать клик в позицию камеры и уже так считать)

Приложения для иллюстрации работы:

1.Генератор случайно падающих квадратов,которые создают в конце некую гору
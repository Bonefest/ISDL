CollisionManager - Класс,который добавляется на сцену и занимается обработкой коллизий всех объектов на сцене.Должен особым образом хранить набор объектов (к примеру сортировка по скаялрному значению радиус-вектора) и благодаря этому более быстро обрабатывать проверку на общие точки.При коллизии должен создавать новый (пользовательский) ивент event->type == COLLISION, который будет содержать два указателя на сталкивающиеся объекты. Так же вызывает событие у Sprite->onCollision(Sprite* obj), которое должно быть реализовано пользователем (или опущено).



Благодаря событию onCollision можно более легко реализовать физику:

Наследуя Sprite и создавая новый класс PhysSprite, можно заранее предсоздать различные поля : скорость,ускорение,силу и т.д.После чего,в методе onCollision задать поведение при столкновении.Например,при столкновении задать изменение вектора скорости на противоположный.Или перевод массы тела и ускорения в силу, которая добавится к другому объекту.

Пользователь так же может хранить последний объект, с которым была коллизия, после чего манипулировать этим.

Примерный интерфейс

CollisionManager manager;
manager.calculate();
Sprite* getObject(Rect pos); //Возвращает объект, точка которого пересекается с заданной координатой.(В случае ошибки - возвращает nullptr).

Не нужно ли Sprite метод типа getData(),который возвращает структуру всех данных про Sprite (не нарушая инкапсуляцию)?Это нужно для того,чтобы в структуре указать различную инфу (имя,тэг,позиция,скорость,ускорение,цвет,жёсткость,коэфициент столкновения,является ли коллизионным), при этом не обязательно, чтобы все поля были заполнены (к примеру,если спрайт не является физическим объектом).Разумеется эта функция виртиуальная.

!Если при стоклновении дожны обрабатываться данные, которые зависят от другого объекта, то может возникнуть ситуация, когда поведение будет не таким, как задумано :

Если два объекта летят друг на друга, то было бы правильно,если бы они обменялись импульсами, но если пользователь захочет напрямую присвоить скорость второго объекта, то второй уже не сможет получить скорость первого (т.к его скорость уже будет равна своей же скорости).

class CollisionManager {
private:
	std::vector<Sprite*> objects;	//Отсортированный массив всех доступных объектов
public:
	addSprite(Sprite*);
	removeSprite(Sprite*);
	
	virtual void calculate();	//Считает столкновения всех объектов и вызывает для них события
	Sprite* getObject(Rect pos,int z=0);	//Возвращает объект, точка которого пересекается с заданной координатой.(В случае ошибки - возвращает nullptr).Z отвечает за то,с какой z-позиции обрабатывать проверку.(Ниже - пропускать).

};